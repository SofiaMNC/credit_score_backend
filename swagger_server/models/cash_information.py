# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CashInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cnt_instalment: int=None, cnt_instalment_future: int=None, months_balance: int=None, name_contract_status: str=None, sk_dpd: int=None, sk_id_curr: int=None, sk_id_prev: int=None):  # noqa: E501
        """CashInformation - a model defined in Swagger

        :param cnt_instalment: The cnt_instalment of this CashInformation.  # noqa: E501
        :type cnt_instalment: int
        :param cnt_instalment_future: The cnt_instalment_future of this CashInformation.  # noqa: E501
        :type cnt_instalment_future: int
        :param months_balance: The months_balance of this CashInformation.  # noqa: E501
        :type months_balance: int
        :param name_contract_status: The name_contract_status of this CashInformation.  # noqa: E501
        :type name_contract_status: str
        :param sk_dpd: The sk_dpd of this CashInformation.  # noqa: E501
        :type sk_dpd: int
        :param sk_id_curr: The sk_id_curr of this CashInformation.  # noqa: E501
        :type sk_id_curr: int
        :param sk_id_prev: The sk_id_prev of this CashInformation.  # noqa: E501
        :type sk_id_prev: int
        """
        self.swagger_types = {
            'cnt_instalment': int,
            'cnt_instalment_future': int,
            'months_balance': int,
            'name_contract_status': str,
            'sk_dpd': int,
            'sk_id_curr': int,
            'sk_id_prev': int
        }

        self.attribute_map = {
            'cnt_instalment': 'CNT_INSTALMENT',
            'cnt_instalment_future': 'CNT_INSTALMENT_FUTURE',
            'months_balance': 'MONTHS_BALANCE',
            'name_contract_status': 'NAME_CONTRACT_STATUS',
            'sk_dpd': 'SK_DPD',
            'sk_id_curr': 'SK_ID_CURR',
            'sk_id_prev': 'SK_ID_PREV'
        }
        self._cnt_instalment = cnt_instalment
        self._cnt_instalment_future = cnt_instalment_future
        self._months_balance = months_balance
        self._name_contract_status = name_contract_status
        self._sk_dpd = sk_dpd
        self._sk_id_curr = sk_id_curr
        self._sk_id_prev = sk_id_prev

    @classmethod
    def from_dict(cls, dikt) -> 'CashInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CashInformation of this CashInformation.  # noqa: E501
        :rtype: CashInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cnt_instalment(self) -> int:
        """Gets the cnt_instalment of this CashInformation.

        Term of previous credit (can change over time)  # noqa: E501

        :return: The cnt_instalment of this CashInformation.
        :rtype: int
        """
        return self._cnt_instalment

    @cnt_instalment.setter
    def cnt_instalment(self, cnt_instalment: int):
        """Sets the cnt_instalment of this CashInformation.

        Term of previous credit (can change over time)  # noqa: E501

        :param cnt_instalment: The cnt_instalment of this CashInformation.
        :type cnt_instalment: int
        """

        self._cnt_instalment = cnt_instalment

    @property
    def cnt_instalment_future(self) -> int:
        """Gets the cnt_instalment_future of this CashInformation.

        Installments left to pay on the previous credit  # noqa: E501

        :return: The cnt_instalment_future of this CashInformation.
        :rtype: int
        """
        return self._cnt_instalment_future

    @cnt_instalment_future.setter
    def cnt_instalment_future(self, cnt_instalment_future: int):
        """Sets the cnt_instalment_future of this CashInformation.

        Installments left to pay on the previous credit  # noqa: E501

        :param cnt_instalment_future: The cnt_instalment_future of this CashInformation.
        :type cnt_instalment_future: int
        """

        self._cnt_instalment_future = cnt_instalment_future

    @property
    def months_balance(self) -> int:
        """Gets the months_balance of this CashInformation.

        Month of balance relative to application date (-1 means the information to the freshest monthly snapshot, 0 means the information at application - often it will be the same as -1 as many banks are not updating the information to Credit Bureau regularly )  # noqa: E501

        :return: The months_balance of this CashInformation.
        :rtype: int
        """
        return self._months_balance

    @months_balance.setter
    def months_balance(self, months_balance: int):
        """Sets the months_balance of this CashInformation.

        Month of balance relative to application date (-1 means the information to the freshest monthly snapshot, 0 means the information at application - often it will be the same as -1 as many banks are not updating the information to Credit Bureau regularly )  # noqa: E501

        :param months_balance: The months_balance of this CashInformation.
        :type months_balance: int
        """

        self._months_balance = months_balance

    @property
    def name_contract_status(self) -> str:
        """Gets the name_contract_status of this CashInformation.

        Contract status during the month  # noqa: E501

        :return: The name_contract_status of this CashInformation.
        :rtype: str
        """
        return self._name_contract_status

    @name_contract_status.setter
    def name_contract_status(self, name_contract_status: str):
        """Sets the name_contract_status of this CashInformation.

        Contract status during the month  # noqa: E501

        :param name_contract_status: The name_contract_status of this CashInformation.
        :type name_contract_status: str
        """
        allowed_values = ["Active", "Completed", "Signed", "Approved", "Returned to the store", "Demand", "Canceled", "XNA", "Amortized debt"]  # noqa: E501
        if name_contract_status not in allowed_values:
            raise ValueError(
                "Invalid value for `name_contract_status` ({0}), must be one of {1}"
                .format(name_contract_status, allowed_values)
            )

        self._name_contract_status = name_contract_status

    @property
    def sk_dpd(self) -> int:
        """Gets the sk_dpd of this CashInformation.

        DPD (days past due) during the month of previous credit  # noqa: E501

        :return: The sk_dpd of this CashInformation.
        :rtype: int
        """
        return self._sk_dpd

    @sk_dpd.setter
    def sk_dpd(self, sk_dpd: int):
        """Sets the sk_dpd of this CashInformation.

        DPD (days past due) during the month of previous credit  # noqa: E501

        :param sk_dpd: The sk_dpd of this CashInformation.
        :type sk_dpd: int
        """

        self._sk_dpd = sk_dpd

    @property
    def sk_id_curr(self) -> int:
        """Gets the sk_id_curr of this CashInformation.

        ID of loan in our sample  # noqa: E501

        :return: The sk_id_curr of this CashInformation.
        :rtype: int
        """
        return self._sk_id_curr

    @sk_id_curr.setter
    def sk_id_curr(self, sk_id_curr: int):
        """Sets the sk_id_curr of this CashInformation.

        ID of loan in our sample  # noqa: E501

        :param sk_id_curr: The sk_id_curr of this CashInformation.
        :type sk_id_curr: int
        """

        self._sk_id_curr = sk_id_curr

    @property
    def sk_id_prev(self) -> int:
        """Gets the sk_id_prev of this CashInformation.

        ID of previous credit in Home Credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loans in Home Credit)  # noqa: E501

        :return: The sk_id_prev of this CashInformation.
        :rtype: int
        """
        return self._sk_id_prev

    @sk_id_prev.setter
    def sk_id_prev(self, sk_id_prev: int):
        """Sets the sk_id_prev of this CashInformation.

        ID of previous credit in Home Credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loans in Home Credit)  # noqa: E501

        :param sk_id_prev: The sk_id_prev of this CashInformation.
        :type sk_id_prev: int
        """

        self._sk_id_prev = sk_id_prev
