# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApplicationInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, amt_annuity: float=None, amt_credi: float=None, amt_income_total: float=None, amt_req_credit_bureau_qrt: int=None, apartments_avg: float=None, basementarea_avg: float=None, code_gender: str=None, commonarea_avg: int=None, days_birth: float=None, days_employed: int=None, days_id_publish: int=None, days_last_phone_change: int=None, days_registration: int=None, def_30_cnt_social_circle: int=None, def_60_cnt_social_circle: int=None, elevators_avg: float=None, entrances_avg: float=None, ext_source_1: float=None, ext_source_2: float=None, ext_source_3: float=None, flag_document_16: bool=False, flag_document_18: bool=False, flag_document_3: bool=False, flag_work_phone: bool=False, floorsmax_avg: float=None, floorsmin_avg: float=None, hour_appr_process_start: int=None, landarea_avg: float=None, name_contract_type: str=None, name_education_type: str=None, name_family_status: str=None, name_income_type: str=None, name_type_suite: str=None, nonlivingapartments_avg: float=None, nonlivingarea_avg: float=None, obs_30_cnt_social_circle: int=None, occupation_type: str=None, organization_type: str=None, own_car_age: int=None, reg_city_not_live_city: bool=False, region_population_relative: float=None, region_rating_client: int=None, sk_id_curr: int=None, target: bool=False, years_beginexpluatation_avg: float=None, years_build_avg: float=None):  # noqa: E501
        """ApplicationInformation - a model defined in Swagger

        :param amt_annuity: The amt_annuity of this ApplicationInformation.  # noqa: E501
        :type amt_annuity: float
        :param amt_credi: The amt_credi of this ApplicationInformation.  # noqa: E501
        :type amt_credi: float
        :param amt_income_total: The amt_income_total of this ApplicationInformation.  # noqa: E501
        :type amt_income_total: float
        :param amt_req_credit_bureau_qrt: The amt_req_credit_bureau_qrt of this ApplicationInformation.  # noqa: E501
        :type amt_req_credit_bureau_qrt: int
        :param apartments_avg: The apartments_avg of this ApplicationInformation.  # noqa: E501
        :type apartments_avg: float
        :param basementarea_avg: The basementarea_avg of this ApplicationInformation.  # noqa: E501
        :type basementarea_avg: float
        :param code_gender: The code_gender of this ApplicationInformation.  # noqa: E501
        :type code_gender: str
        :param commonarea_avg: The commonarea_avg of this ApplicationInformation.  # noqa: E501
        :type commonarea_avg: int
        :param days_birth: The days_birth of this ApplicationInformation.  # noqa: E501
        :type days_birth: float
        :param days_employed: The days_employed of this ApplicationInformation.  # noqa: E501
        :type days_employed: int
        :param days_id_publish: The days_id_publish of this ApplicationInformation.  # noqa: E501
        :type days_id_publish: int
        :param days_last_phone_change: The days_last_phone_change of this ApplicationInformation.  # noqa: E501
        :type days_last_phone_change: int
        :param days_registration: The days_registration of this ApplicationInformation.  # noqa: E501
        :type days_registration: int
        :param def_30_cnt_social_circle: The def_30_cnt_social_circle of this ApplicationInformation.  # noqa: E501
        :type def_30_cnt_social_circle: int
        :param def_60_cnt_social_circle: The def_60_cnt_social_circle of this ApplicationInformation.  # noqa: E501
        :type def_60_cnt_social_circle: int
        :param elevators_avg: The elevators_avg of this ApplicationInformation.  # noqa: E501
        :type elevators_avg: float
        :param entrances_avg: The entrances_avg of this ApplicationInformation.  # noqa: E501
        :type entrances_avg: float
        :param ext_source_1: The ext_source_1 of this ApplicationInformation.  # noqa: E501
        :type ext_source_1: float
        :param ext_source_2: The ext_source_2 of this ApplicationInformation.  # noqa: E501
        :type ext_source_2: float
        :param ext_source_3: The ext_source_3 of this ApplicationInformation.  # noqa: E501
        :type ext_source_3: float
        :param flag_document_16: The flag_document_16 of this ApplicationInformation.  # noqa: E501
        :type flag_document_16: bool
        :param flag_document_18: The flag_document_18 of this ApplicationInformation.  # noqa: E501
        :type flag_document_18: bool
        :param flag_document_3: The flag_document_3 of this ApplicationInformation.  # noqa: E501
        :type flag_document_3: bool
        :param flag_work_phone: The flag_work_phone of this ApplicationInformation.  # noqa: E501
        :type flag_work_phone: bool
        :param floorsmax_avg: The floorsmax_avg of this ApplicationInformation.  # noqa: E501
        :type floorsmax_avg: float
        :param floorsmin_avg: The floorsmin_avg of this ApplicationInformation.  # noqa: E501
        :type floorsmin_avg: float
        :param hour_appr_process_start: The hour_appr_process_start of this ApplicationInformation.  # noqa: E501
        :type hour_appr_process_start: int
        :param landarea_avg: The landarea_avg of this ApplicationInformation.  # noqa: E501
        :type landarea_avg: float
        :param name_contract_type: The name_contract_type of this ApplicationInformation.  # noqa: E501
        :type name_contract_type: str
        :param name_education_type: The name_education_type of this ApplicationInformation.  # noqa: E501
        :type name_education_type: str
        :param name_family_status: The name_family_status of this ApplicationInformation.  # noqa: E501
        :type name_family_status: str
        :param name_income_type: The name_income_type of this ApplicationInformation.  # noqa: E501
        :type name_income_type: str
        :param name_type_suite: The name_type_suite of this ApplicationInformation.  # noqa: E501
        :type name_type_suite: str
        :param nonlivingapartments_avg: The nonlivingapartments_avg of this ApplicationInformation.  # noqa: E501
        :type nonlivingapartments_avg: float
        :param nonlivingarea_avg: The nonlivingarea_avg of this ApplicationInformation.  # noqa: E501
        :type nonlivingarea_avg: float
        :param obs_30_cnt_social_circle: The obs_30_cnt_social_circle of this ApplicationInformation.  # noqa: E501
        :type obs_30_cnt_social_circle: int
        :param occupation_type: The occupation_type of this ApplicationInformation.  # noqa: E501
        :type occupation_type: str
        :param organization_type: The organization_type of this ApplicationInformation.  # noqa: E501
        :type organization_type: str
        :param own_car_age: The own_car_age of this ApplicationInformation.  # noqa: E501
        :type own_car_age: int
        :param reg_city_not_live_city: The reg_city_not_live_city of this ApplicationInformation.  # noqa: E501
        :type reg_city_not_live_city: bool
        :param region_population_relative: The region_population_relative of this ApplicationInformation.  # noqa: E501
        :type region_population_relative: float
        :param region_rating_client: The region_rating_client of this ApplicationInformation.  # noqa: E501
        :type region_rating_client: int
        :param sk_id_curr: The sk_id_curr of this ApplicationInformation.  # noqa: E501
        :type sk_id_curr: int
        :param target: The target of this ApplicationInformation.  # noqa: E501
        :type target: bool
        :param years_beginexpluatation_avg: The years_beginexpluatation_avg of this ApplicationInformation.  # noqa: E501
        :type years_beginexpluatation_avg: float
        :param years_build_avg: The years_build_avg of this ApplicationInformation.  # noqa: E501
        :type years_build_avg: float
        """
        self.swagger_types = {
            'amt_annuity': float,
            'amt_credi': float,
            'amt_income_total': float,
            'amt_req_credit_bureau_qrt': int,
            'apartments_avg': float,
            'basementarea_avg': float,
            'code_gender': str,
            'commonarea_avg': int,
            'days_birth': float,
            'days_employed': int,
            'days_id_publish': int,
            'days_last_phone_change': int,
            'days_registration': int,
            'def_30_cnt_social_circle': int,
            'def_60_cnt_social_circle': int,
            'elevators_avg': float,
            'entrances_avg': float,
            'ext_source_1': float,
            'ext_source_2': float,
            'ext_source_3': float,
            'flag_document_16': bool,
            'flag_document_18': bool,
            'flag_document_3': bool,
            'flag_work_phone': bool,
            'floorsmax_avg': float,
            'floorsmin_avg': float,
            'hour_appr_process_start': int,
            'landarea_avg': float,
            'name_contract_type': str,
            'name_education_type': str,
            'name_family_status': str,
            'name_income_type': str,
            'name_type_suite': str,
            'nonlivingapartments_avg': float,
            'nonlivingarea_avg': float,
            'obs_30_cnt_social_circle': int,
            'occupation_type': str,
            'organization_type': str,
            'own_car_age': int,
            'reg_city_not_live_city': bool,
            'region_population_relative': float,
            'region_rating_client': int,
            'sk_id_curr': int,
            'target': bool,
            'years_beginexpluatation_avg': float,
            'years_build_avg': float
        }

        self.attribute_map = {
            'amt_annuity': 'AMT_ANNUITY',
            'amt_credi': 'AMT_CREDI',
            'amt_income_total': 'AMT_INCOME_TOTAL',
            'amt_req_credit_bureau_qrt': 'AMT_REQ_CREDIT_BUREAU_QRT',
            'apartments_avg': 'APARTMENTS_AVG',
            'basementarea_avg': 'BASEMENTAREA_AVG',
            'code_gender': 'CODE_GENDER',
            'commonarea_avg': 'COMMONAREA_AVG',
            'days_birth': 'DAYS_BIRTH',
            'days_employed': 'DAYS_EMPLOYED',
            'days_id_publish': 'DAYS_ID_PUBLISH',
            'days_last_phone_change': 'DAYS_LAST_PHONE_CHANGE',
            'days_registration': 'DAYS_REGISTRATION',
            'def_30_cnt_social_circle': 'DEF_30_CNT_SOCIAL_CIRCLE',
            'def_60_cnt_social_circle': 'DEF_60_CNT_SOCIAL_CIRCLE',
            'elevators_avg': 'ELEVATORS_AVG',
            'entrances_avg': 'ENTRANCES_AVG',
            'ext_source_1': 'EXT_SOURCE_1',
            'ext_source_2': 'EXT_SOURCE_2',
            'ext_source_3': 'EXT_SOURCE_3',
            'flag_document_16': 'FLAG_DOCUMENT_16',
            'flag_document_18': 'FLAG_DOCUMENT_18',
            'flag_document_3': 'FLAG_DOCUMENT_3',
            'flag_work_phone': 'FLAG_WORK_PHONE',
            'floorsmax_avg': 'FLOORSMAX_AVG',
            'floorsmin_avg': 'FLOORSMIN_AVG',
            'hour_appr_process_start': 'HOUR_APPR_PROCESS_START',
            'landarea_avg': 'LANDAREA_AVG',
            'name_contract_type': 'NAME_CONTRACT_TYPE',
            'name_education_type': 'NAME_EDUCATION_TYPE',
            'name_family_status': 'NAME_FAMILY_STATUS',
            'name_income_type': 'NAME_INCOME_TYPE',
            'name_type_suite': 'NAME_TYPE_SUITE',
            'nonlivingapartments_avg': 'NONLIVINGAPARTMENTS_AVG',
            'nonlivingarea_avg': 'NONLIVINGAREA_AVG',
            'obs_30_cnt_social_circle': 'OBS_30_CNT_SOCIAL_CIRCLE',
            'occupation_type': 'OCCUPATION_TYPE',
            'organization_type': 'ORGANIZATION_TYPE',
            'own_car_age': 'OWN_CAR_AGE',
            'reg_city_not_live_city': 'REG_CITY_NOT_LIVE_CITY',
            'region_population_relative': 'REGION_POPULATION_RELATIVE',
            'region_rating_client': 'REGION_RATING_CLIENT',
            'sk_id_curr': 'SK_ID_CURR',
            'target': 'TARGET',
            'years_beginexpluatation_avg': 'YEARS_BEGINEXPLUATATION_AVG',
            'years_build_avg': 'YEARS_BUILD_AVG'
        }
        self._amt_annuity = amt_annuity
        self._amt_credi = amt_credi
        self._amt_income_total = amt_income_total
        self._amt_req_credit_bureau_qrt = amt_req_credit_bureau_qrt
        self._apartments_avg = apartments_avg
        self._basementarea_avg = basementarea_avg
        self._code_gender = code_gender
        self._commonarea_avg = commonarea_avg
        self._days_birth = days_birth
        self._days_employed = days_employed
        self._days_id_publish = days_id_publish
        self._days_last_phone_change = days_last_phone_change
        self._days_registration = days_registration
        self._def_30_cnt_social_circle = def_30_cnt_social_circle
        self._def_60_cnt_social_circle = def_60_cnt_social_circle
        self._elevators_avg = elevators_avg
        self._entrances_avg = entrances_avg
        self._ext_source_1 = ext_source_1
        self._ext_source_2 = ext_source_2
        self._ext_source_3 = ext_source_3
        self._flag_document_16 = flag_document_16
        self._flag_document_18 = flag_document_18
        self._flag_document_3 = flag_document_3
        self._flag_work_phone = flag_work_phone
        self._floorsmax_avg = floorsmax_avg
        self._floorsmin_avg = floorsmin_avg
        self._hour_appr_process_start = hour_appr_process_start
        self._landarea_avg = landarea_avg
        self._name_contract_type = name_contract_type
        self._name_education_type = name_education_type
        self._name_family_status = name_family_status
        self._name_income_type = name_income_type
        self._name_type_suite = name_type_suite
        self._nonlivingapartments_avg = nonlivingapartments_avg
        self._nonlivingarea_avg = nonlivingarea_avg
        self._obs_30_cnt_social_circle = obs_30_cnt_social_circle
        self._occupation_type = occupation_type
        self._organization_type = organization_type
        self._own_car_age = own_car_age
        self._reg_city_not_live_city = reg_city_not_live_city
        self._region_population_relative = region_population_relative
        self._region_rating_client = region_rating_client
        self._sk_id_curr = sk_id_curr
        self._target = target
        self._years_beginexpluatation_avg = years_beginexpluatation_avg
        self._years_build_avg = years_build_avg

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationInformation of this ApplicationInformation.  # noqa: E501
        :rtype: ApplicationInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amt_annuity(self) -> float:
        """Gets the amt_annuity of this ApplicationInformation.

        Loan annuity  # noqa: E501

        :return: The amt_annuity of this ApplicationInformation.
        :rtype: float
        """
        return self._amt_annuity

    @amt_annuity.setter
    def amt_annuity(self, amt_annuity: float):
        """Sets the amt_annuity of this ApplicationInformation.

        Loan annuity  # noqa: E501

        :param amt_annuity: The amt_annuity of this ApplicationInformation.
        :type amt_annuity: float
        """

        self._amt_annuity = amt_annuity

    @property
    def amt_credi(self) -> float:
        """Gets the amt_credi of this ApplicationInformation.

        Credit amount of the loan  # noqa: E501

        :return: The amt_credi of this ApplicationInformation.
        :rtype: float
        """
        return self._amt_credi

    @amt_credi.setter
    def amt_credi(self, amt_credi: float):
        """Sets the amt_credi of this ApplicationInformation.

        Credit amount of the loan  # noqa: E501

        :param amt_credi: The amt_credi of this ApplicationInformation.
        :type amt_credi: float
        """

        self._amt_credi = amt_credi

    @property
    def amt_income_total(self) -> float:
        """Gets the amt_income_total of this ApplicationInformation.

        Income of the client  # noqa: E501

        :return: The amt_income_total of this ApplicationInformation.
        :rtype: float
        """
        return self._amt_income_total

    @amt_income_total.setter
    def amt_income_total(self, amt_income_total: float):
        """Sets the amt_income_total of this ApplicationInformation.

        Income of the client  # noqa: E501

        :param amt_income_total: The amt_income_total of this ApplicationInformation.
        :type amt_income_total: float
        """

        self._amt_income_total = amt_income_total

    @property
    def amt_req_credit_bureau_qrt(self) -> int:
        """Gets the amt_req_credit_bureau_qrt of this ApplicationInformation.

        Number of enquiries to Credit Bureau about the client 3 month before application (excluding one month before application)  # noqa: E501

        :return: The amt_req_credit_bureau_qrt of this ApplicationInformation.
        :rtype: int
        """
        return self._amt_req_credit_bureau_qrt

    @amt_req_credit_bureau_qrt.setter
    def amt_req_credit_bureau_qrt(self, amt_req_credit_bureau_qrt: int):
        """Sets the amt_req_credit_bureau_qrt of this ApplicationInformation.

        Number of enquiries to Credit Bureau about the client 3 month before application (excluding one month before application)  # noqa: E501

        :param amt_req_credit_bureau_qrt: The amt_req_credit_bureau_qrt of this ApplicationInformation.
        :type amt_req_credit_bureau_qrt: int
        """

        self._amt_req_credit_bureau_qrt = amt_req_credit_bureau_qrt

    @property
    def apartments_avg(self) -> float:
        """Gets the apartments_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The apartments_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._apartments_avg

    @apartments_avg.setter
    def apartments_avg(self, apartments_avg: float):
        """Sets the apartments_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param apartments_avg: The apartments_avg of this ApplicationInformation.
        :type apartments_avg: float
        """

        self._apartments_avg = apartments_avg

    @property
    def basementarea_avg(self) -> float:
        """Gets the basementarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The basementarea_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._basementarea_avg

    @basementarea_avg.setter
    def basementarea_avg(self, basementarea_avg: float):
        """Sets the basementarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param basementarea_avg: The basementarea_avg of this ApplicationInformation.
        :type basementarea_avg: float
        """

        self._basementarea_avg = basementarea_avg

    @property
    def code_gender(self) -> str:
        """Gets the code_gender of this ApplicationInformation.

        Gender of the client  # noqa: E501

        :return: The code_gender of this ApplicationInformation.
        :rtype: str
        """
        return self._code_gender

    @code_gender.setter
    def code_gender(self, code_gender: str):
        """Sets the code_gender of this ApplicationInformation.

        Gender of the client  # noqa: E501

        :param code_gender: The code_gender of this ApplicationInformation.
        :type code_gender: str
        """
        allowed_values = ["M", "F", "XNA"]  # noqa: E501
        if code_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `code_gender` ({0}), must be one of {1}"
                .format(code_gender, allowed_values)
            )

        self._code_gender = code_gender

    @property
    def commonarea_avg(self) -> int:
        """Gets the commonarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The commonarea_avg of this ApplicationInformation.
        :rtype: int
        """
        return self._commonarea_avg

    @commonarea_avg.setter
    def commonarea_avg(self, commonarea_avg: int):
        """Sets the commonarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param commonarea_avg: The commonarea_avg of this ApplicationInformation.
        :type commonarea_avg: int
        """

        self._commonarea_avg = commonarea_avg

    @property
    def days_birth(self) -> float:
        """Gets the days_birth of this ApplicationInformation.

        Client's age in days at the time of application  # noqa: E501

        :return: The days_birth of this ApplicationInformation.
        :rtype: float
        """
        return self._days_birth

    @days_birth.setter
    def days_birth(self, days_birth: float):
        """Sets the days_birth of this ApplicationInformation.

        Client's age in days at the time of application  # noqa: E501

        :param days_birth: The days_birth of this ApplicationInformation.
        :type days_birth: float
        """

        self._days_birth = days_birth

    @property
    def days_employed(self) -> int:
        """Gets the days_employed of this ApplicationInformation.

        How many days before the application the person started current employment  # noqa: E501

        :return: The days_employed of this ApplicationInformation.
        :rtype: int
        """
        return self._days_employed

    @days_employed.setter
    def days_employed(self, days_employed: int):
        """Sets the days_employed of this ApplicationInformation.

        How many days before the application the person started current employment  # noqa: E501

        :param days_employed: The days_employed of this ApplicationInformation.
        :type days_employed: int
        """

        self._days_employed = days_employed

    @property
    def days_id_publish(self) -> int:
        """Gets the days_id_publish of this ApplicationInformation.

        How many days before the application did client change the identity document with which he applied for the loan  # noqa: E501

        :return: The days_id_publish of this ApplicationInformation.
        :rtype: int
        """
        return self._days_id_publish

    @days_id_publish.setter
    def days_id_publish(self, days_id_publish: int):
        """Sets the days_id_publish of this ApplicationInformation.

        How many days before the application did client change the identity document with which he applied for the loan  # noqa: E501

        :param days_id_publish: The days_id_publish of this ApplicationInformation.
        :type days_id_publish: int
        """

        self._days_id_publish = days_id_publish

    @property
    def days_last_phone_change(self) -> int:
        """Gets the days_last_phone_change of this ApplicationInformation.

        How many days before application did client change phone  # noqa: E501

        :return: The days_last_phone_change of this ApplicationInformation.
        :rtype: int
        """
        return self._days_last_phone_change

    @days_last_phone_change.setter
    def days_last_phone_change(self, days_last_phone_change: int):
        """Sets the days_last_phone_change of this ApplicationInformation.

        How many days before application did client change phone  # noqa: E501

        :param days_last_phone_change: The days_last_phone_change of this ApplicationInformation.
        :type days_last_phone_change: int
        """

        self._days_last_phone_change = days_last_phone_change

    @property
    def days_registration(self) -> int:
        """Gets the days_registration of this ApplicationInformation.

        How many days before the application did client change his registration  # noqa: E501

        :return: The days_registration of this ApplicationInformation.
        :rtype: int
        """
        return self._days_registration

    @days_registration.setter
    def days_registration(self, days_registration: int):
        """Sets the days_registration of this ApplicationInformation.

        How many days before the application did client change his registration  # noqa: E501

        :param days_registration: The days_registration of this ApplicationInformation.
        :type days_registration: int
        """

        self._days_registration = days_registration

    @property
    def def_30_cnt_social_circle(self) -> int:
        """Gets the def_30_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings defaulted on 30 DPD (days past due)  # noqa: E501

        :return: The def_30_cnt_social_circle of this ApplicationInformation.
        :rtype: int
        """
        return self._def_30_cnt_social_circle

    @def_30_cnt_social_circle.setter
    def def_30_cnt_social_circle(self, def_30_cnt_social_circle: int):
        """Sets the def_30_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings defaulted on 30 DPD (days past due)  # noqa: E501

        :param def_30_cnt_social_circle: The def_30_cnt_social_circle of this ApplicationInformation.
        :type def_30_cnt_social_circle: int
        """

        self._def_30_cnt_social_circle = def_30_cnt_social_circle

    @property
    def def_60_cnt_social_circle(self) -> int:
        """Gets the def_60_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings defaulted on 60 (days past due) DPD  # noqa: E501

        :return: The def_60_cnt_social_circle of this ApplicationInformation.
        :rtype: int
        """
        return self._def_60_cnt_social_circle

    @def_60_cnt_social_circle.setter
    def def_60_cnt_social_circle(self, def_60_cnt_social_circle: int):
        """Sets the def_60_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings defaulted on 60 (days past due) DPD  # noqa: E501

        :param def_60_cnt_social_circle: The def_60_cnt_social_circle of this ApplicationInformation.
        :type def_60_cnt_social_circle: int
        """

        self._def_60_cnt_social_circle = def_60_cnt_social_circle

    @property
    def elevators_avg(self) -> float:
        """Gets the elevators_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The elevators_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._elevators_avg

    @elevators_avg.setter
    def elevators_avg(self, elevators_avg: float):
        """Sets the elevators_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param elevators_avg: The elevators_avg of this ApplicationInformation.
        :type elevators_avg: float
        """

        self._elevators_avg = elevators_avg

    @property
    def entrances_avg(self) -> float:
        """Gets the entrances_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The entrances_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._entrances_avg

    @entrances_avg.setter
    def entrances_avg(self, entrances_avg: float):
        """Sets the entrances_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param entrances_avg: The entrances_avg of this ApplicationInformation.
        :type entrances_avg: float
        """

        self._entrances_avg = entrances_avg

    @property
    def ext_source_1(self) -> float:
        """Gets the ext_source_1 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :return: The ext_source_1 of this ApplicationInformation.
        :rtype: float
        """
        return self._ext_source_1

    @ext_source_1.setter
    def ext_source_1(self, ext_source_1: float):
        """Sets the ext_source_1 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :param ext_source_1: The ext_source_1 of this ApplicationInformation.
        :type ext_source_1: float
        """

        self._ext_source_1 = ext_source_1

    @property
    def ext_source_2(self) -> float:
        """Gets the ext_source_2 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :return: The ext_source_2 of this ApplicationInformation.
        :rtype: float
        """
        return self._ext_source_2

    @ext_source_2.setter
    def ext_source_2(self, ext_source_2: float):
        """Sets the ext_source_2 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :param ext_source_2: The ext_source_2 of this ApplicationInformation.
        :type ext_source_2: float
        """

        self._ext_source_2 = ext_source_2

    @property
    def ext_source_3(self) -> float:
        """Gets the ext_source_3 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :return: The ext_source_3 of this ApplicationInformation.
        :rtype: float
        """
        return self._ext_source_3

    @ext_source_3.setter
    def ext_source_3(self, ext_source_3: float):
        """Sets the ext_source_3 of this ApplicationInformation.

        Normalized score from external data source  # noqa: E501

        :param ext_source_3: The ext_source_3 of this ApplicationInformation.
        :type ext_source_3: float
        """

        self._ext_source_3 = ext_source_3

    @property
    def flag_document_16(self) -> bool:
        """Gets the flag_document_16 of this ApplicationInformation.

        Did client provide document 16  # noqa: E501

        :return: The flag_document_16 of this ApplicationInformation.
        :rtype: bool
        """
        return self._flag_document_16

    @flag_document_16.setter
    def flag_document_16(self, flag_document_16: bool):
        """Sets the flag_document_16 of this ApplicationInformation.

        Did client provide document 16  # noqa: E501

        :param flag_document_16: The flag_document_16 of this ApplicationInformation.
        :type flag_document_16: bool
        """

        self._flag_document_16 = flag_document_16

    @property
    def flag_document_18(self) -> bool:
        """Gets the flag_document_18 of this ApplicationInformation.

        Did client provide document 18  # noqa: E501

        :return: The flag_document_18 of this ApplicationInformation.
        :rtype: bool
        """
        return self._flag_document_18

    @flag_document_18.setter
    def flag_document_18(self, flag_document_18: bool):
        """Sets the flag_document_18 of this ApplicationInformation.

        Did client provide document 18  # noqa: E501

        :param flag_document_18: The flag_document_18 of this ApplicationInformation.
        :type flag_document_18: bool
        """

        self._flag_document_18 = flag_document_18

    @property
    def flag_document_3(self) -> bool:
        """Gets the flag_document_3 of this ApplicationInformation.

        Did client provide document 3  # noqa: E501

        :return: The flag_document_3 of this ApplicationInformation.
        :rtype: bool
        """
        return self._flag_document_3

    @flag_document_3.setter
    def flag_document_3(self, flag_document_3: bool):
        """Sets the flag_document_3 of this ApplicationInformation.

        Did client provide document 3  # noqa: E501

        :param flag_document_3: The flag_document_3 of this ApplicationInformation.
        :type flag_document_3: bool
        """

        self._flag_document_3 = flag_document_3

    @property
    def flag_work_phone(self) -> bool:
        """Gets the flag_work_phone of this ApplicationInformation.

        Did client provide home phone (1=YES, 0=NO)  # noqa: E501

        :return: The flag_work_phone of this ApplicationInformation.
        :rtype: bool
        """
        return self._flag_work_phone

    @flag_work_phone.setter
    def flag_work_phone(self, flag_work_phone: bool):
        """Sets the flag_work_phone of this ApplicationInformation.

        Did client provide home phone (1=YES, 0=NO)  # noqa: E501

        :param flag_work_phone: The flag_work_phone of this ApplicationInformation.
        :type flag_work_phone: bool
        """

        self._flag_work_phone = flag_work_phone

    @property
    def floorsmax_avg(self) -> float:
        """Gets the floorsmax_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The floorsmax_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._floorsmax_avg

    @floorsmax_avg.setter
    def floorsmax_avg(self, floorsmax_avg: float):
        """Sets the floorsmax_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param floorsmax_avg: The floorsmax_avg of this ApplicationInformation.
        :type floorsmax_avg: float
        """

        self._floorsmax_avg = floorsmax_avg

    @property
    def floorsmin_avg(self) -> float:
        """Gets the floorsmin_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The floorsmin_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._floorsmin_avg

    @floorsmin_avg.setter
    def floorsmin_avg(self, floorsmin_avg: float):
        """Sets the floorsmin_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param floorsmin_avg: The floorsmin_avg of this ApplicationInformation.
        :type floorsmin_avg: float
        """

        self._floorsmin_avg = floorsmin_avg

    @property
    def hour_appr_process_start(self) -> int:
        """Gets the hour_appr_process_start of this ApplicationInformation.

        Approximately at what hour did the client apply for the loan  # noqa: E501

        :return: The hour_appr_process_start of this ApplicationInformation.
        :rtype: int
        """
        return self._hour_appr_process_start

    @hour_appr_process_start.setter
    def hour_appr_process_start(self, hour_appr_process_start: int):
        """Sets the hour_appr_process_start of this ApplicationInformation.

        Approximately at what hour did the client apply for the loan  # noqa: E501

        :param hour_appr_process_start: The hour_appr_process_start of this ApplicationInformation.
        :type hour_appr_process_start: int
        """

        self._hour_appr_process_start = hour_appr_process_start

    @property
    def landarea_avg(self) -> float:
        """Gets the landarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The landarea_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._landarea_avg

    @landarea_avg.setter
    def landarea_avg(self, landarea_avg: float):
        """Sets the landarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param landarea_avg: The landarea_avg of this ApplicationInformation.
        :type landarea_avg: float
        """

        self._landarea_avg = landarea_avg

    @property
    def name_contract_type(self) -> str:
        """Gets the name_contract_type of this ApplicationInformation.

        Identification if loan is cash or revolving  # noqa: E501

        :return: The name_contract_type of this ApplicationInformation.
        :rtype: str
        """
        return self._name_contract_type

    @name_contract_type.setter
    def name_contract_type(self, name_contract_type: str):
        """Sets the name_contract_type of this ApplicationInformation.

        Identification if loan is cash or revolving  # noqa: E501

        :param name_contract_type: The name_contract_type of this ApplicationInformation.
        :type name_contract_type: str
        """
        allowed_values = ["Cash loans", "Revolving loans"]  # noqa: E501
        if name_contract_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_contract_type` ({0}), must be one of {1}"
                .format(name_contract_type, allowed_values)
            )

        self._name_contract_type = name_contract_type

    @property
    def name_education_type(self) -> str:
        """Gets the name_education_type of this ApplicationInformation.

        Level of highest education the client achieved  # noqa: E501

        :return: The name_education_type of this ApplicationInformation.
        :rtype: str
        """
        return self._name_education_type

    @name_education_type.setter
    def name_education_type(self, name_education_type: str):
        """Sets the name_education_type of this ApplicationInformation.

        Level of highest education the client achieved  # noqa: E501

        :param name_education_type: The name_education_type of this ApplicationInformation.
        :type name_education_type: str
        """
        allowed_values = ["Secondary / secondary special", "Higher education", "Incomplete higher", "Lower secondary", "Academic degree"]  # noqa: E501
        if name_education_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_education_type` ({0}), must be one of {1}"
                .format(name_education_type, allowed_values)
            )

        self._name_education_type = name_education_type

    @property
    def name_family_status(self) -> str:
        """Gets the name_family_status of this ApplicationInformation.

        Family status of the client  # noqa: E501

        :return: The name_family_status of this ApplicationInformation.
        :rtype: str
        """
        return self._name_family_status

    @name_family_status.setter
    def name_family_status(self, name_family_status: str):
        """Sets the name_family_status of this ApplicationInformation.

        Family status of the client  # noqa: E501

        :param name_family_status: The name_family_status of this ApplicationInformation.
        :type name_family_status: str
        """
        allowed_values = ["Single / not married", "Married", "Civil marriage", "Widow", "Separated", "Unknown"]  # noqa: E501
        if name_family_status not in allowed_values:
            raise ValueError(
                "Invalid value for `name_family_status` ({0}), must be one of {1}"
                .format(name_family_status, allowed_values)
            )

        self._name_family_status = name_family_status

    @property
    def name_income_type(self) -> str:
        """Gets the name_income_type of this ApplicationInformation.

        Clients income type (businessman, working, maternity leave,…)  # noqa: E501

        :return: The name_income_type of this ApplicationInformation.
        :rtype: str
        """
        return self._name_income_type

    @name_income_type.setter
    def name_income_type(self, name_income_type: str):
        """Sets the name_income_type of this ApplicationInformation.

        Clients income type (businessman, working, maternity leave,…)  # noqa: E501

        :param name_income_type: The name_income_type of this ApplicationInformation.
        :type name_income_type: str
        """
        allowed_values = ["Working", "State servant", "Commercial associate", "Pensioner", "Unemployed", "Student", "Businessman", "Maternity leave"]  # noqa: E501
        if name_income_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_income_type` ({0}), must be one of {1}"
                .format(name_income_type, allowed_values)
            )

        self._name_income_type = name_income_type

    @property
    def name_type_suite(self) -> str:
        """Gets the name_type_suite of this ApplicationInformation.

        Who was accompanying client when he was applying for the loan  # noqa: E501

        :return: The name_type_suite of this ApplicationInformation.
        :rtype: str
        """
        return self._name_type_suite

    @name_type_suite.setter
    def name_type_suite(self, name_type_suite: str):
        """Sets the name_type_suite of this ApplicationInformation.

        Who was accompanying client when he was applying for the loan  # noqa: E501

        :param name_type_suite: The name_type_suite of this ApplicationInformation.
        :type name_type_suite: str
        """
        allowed_values = ["Unaccompanied", "Family", "Spouse, partner", "Children", "Other_A", "Other_B", "Group of people"]  # noqa: E501
        if name_type_suite not in allowed_values:
            raise ValueError(
                "Invalid value for `name_type_suite` ({0}), must be one of {1}"
                .format(name_type_suite, allowed_values)
            )

        self._name_type_suite = name_type_suite

    @property
    def nonlivingapartments_avg(self) -> float:
        """Gets the nonlivingapartments_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The nonlivingapartments_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._nonlivingapartments_avg

    @nonlivingapartments_avg.setter
    def nonlivingapartments_avg(self, nonlivingapartments_avg: float):
        """Sets the nonlivingapartments_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param nonlivingapartments_avg: The nonlivingapartments_avg of this ApplicationInformation.
        :type nonlivingapartments_avg: float
        """

        self._nonlivingapartments_avg = nonlivingapartments_avg

    @property
    def nonlivingarea_avg(self) -> float:
        """Gets the nonlivingarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The nonlivingarea_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._nonlivingarea_avg

    @nonlivingarea_avg.setter
    def nonlivingarea_avg(self, nonlivingarea_avg: float):
        """Sets the nonlivingarea_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param nonlivingarea_avg: The nonlivingarea_avg of this ApplicationInformation.
        :type nonlivingarea_avg: float
        """

        self._nonlivingarea_avg = nonlivingarea_avg

    @property
    def obs_30_cnt_social_circle(self) -> int:
        """Gets the obs_30_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings with observable 30 DPD (days past due) default  # noqa: E501

        :return: The obs_30_cnt_social_circle of this ApplicationInformation.
        :rtype: int
        """
        return self._obs_30_cnt_social_circle

    @obs_30_cnt_social_circle.setter
    def obs_30_cnt_social_circle(self, obs_30_cnt_social_circle: int):
        """Sets the obs_30_cnt_social_circle of this ApplicationInformation.

        How many observation of client's social surroundings with observable 30 DPD (days past due) default  # noqa: E501

        :param obs_30_cnt_social_circle: The obs_30_cnt_social_circle of this ApplicationInformation.
        :type obs_30_cnt_social_circle: int
        """

        self._obs_30_cnt_social_circle = obs_30_cnt_social_circle

    @property
    def occupation_type(self) -> str:
        """Gets the occupation_type of this ApplicationInformation.

        What kind of occupation does the client have  # noqa: E501

        :return: The occupation_type of this ApplicationInformation.
        :rtype: str
        """
        return self._occupation_type

    @occupation_type.setter
    def occupation_type(self, occupation_type: str):
        """Sets the occupation_type of this ApplicationInformation.

        What kind of occupation does the client have  # noqa: E501

        :param occupation_type: The occupation_type of this ApplicationInformation.
        :type occupation_type: str
        """
        allowed_values = ["Laborers", "Core staff", "Accountants", "Managers", "Drivers", "Sales staff", "Cleaning staff", "Cooking staff", "Private service staff", "Medicine staff", "Security staff", "High skill tech staff", "Waiters/barmen staff", "Low-skill Laborers", "Realty agents", "Secretaries", "IT staff", "HR staff"]  # noqa: E501
        if occupation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `occupation_type` ({0}), must be one of {1}"
                .format(occupation_type, allowed_values)
            )

        self._occupation_type = occupation_type

    @property
    def organization_type(self) -> str:
        """Gets the organization_type of this ApplicationInformation.

        Type of organization where client works  # noqa: E501

        :return: The organization_type of this ApplicationInformation.
        :rtype: str
        """
        return self._organization_type

    @organization_type.setter
    def organization_type(self, organization_type: str):
        """Sets the organization_type of this ApplicationInformation.

        Type of organization where client works  # noqa: E501

        :param organization_type: The organization_type of this ApplicationInformation.
        :type organization_type: str
        """
        allowed_values = ["Business Entity Type 3", "School", "Government", "Religion", "Other", "XNA", "Electricity", "Medicine", "Business Entity Type 2", "Self-employed", "Transport: type 2", "Construction", "Housing", "Kindergarten", "Trade: type 7", "Industry: type 11", "Military", "Services", "Security Ministries", "Transport: type 4", "Industry: type 1", "Emergency", "Security", "Trade: type 2", "University", "Transport: type 3", "Police", "Business Entity Type 1", "Postal", "Industry: type 4", "Agriculture", "Restaurant", "Culture", "Hotel", "Industry: type 7", "Trade: type 3", "Industry: type 3", "Bank", "Industry: type 9", "Insurance", "Trade: type 6", "Industry: type 2", "Transport: type 1", "Industry: type 12", "Mobile", "Trade: type 1", "Industry: type 5", "Industry: type 10", "Legal Services", "Advertising", "Trade: type 5", "Cleaning", "Industry: type 13", "Trade: type 4", "Telecom", "Industry: type 8", "Realtor", "Industry: type 6"]  # noqa: E501
        if organization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `organization_type` ({0}), must be one of {1}"
                .format(organization_type, allowed_values)
            )

        self._organization_type = organization_type

    @property
    def own_car_age(self) -> int:
        """Gets the own_car_age of this ApplicationInformation.

        Age of client's car  # noqa: E501

        :return: The own_car_age of this ApplicationInformation.
        :rtype: int
        """
        return self._own_car_age

    @own_car_age.setter
    def own_car_age(self, own_car_age: int):
        """Sets the own_car_age of this ApplicationInformation.

        Age of client's car  # noqa: E501

        :param own_car_age: The own_car_age of this ApplicationInformation.
        :type own_car_age: int
        """

        self._own_car_age = own_car_age

    @property
    def reg_city_not_live_city(self) -> bool:
        """Gets the reg_city_not_live_city of this ApplicationInformation.

        Flag if client's permanent address does not match contact address (1=different, 0=same, at city level)  # noqa: E501

        :return: The reg_city_not_live_city of this ApplicationInformation.
        :rtype: bool
        """
        return self._reg_city_not_live_city

    @reg_city_not_live_city.setter
    def reg_city_not_live_city(self, reg_city_not_live_city: bool):
        """Sets the reg_city_not_live_city of this ApplicationInformation.

        Flag if client's permanent address does not match contact address (1=different, 0=same, at city level)  # noqa: E501

        :param reg_city_not_live_city: The reg_city_not_live_city of this ApplicationInformation.
        :type reg_city_not_live_city: bool
        """

        self._reg_city_not_live_city = reg_city_not_live_city

    @property
    def region_population_relative(self) -> float:
        """Gets the region_population_relative of this ApplicationInformation.

        Normalized population of region where client lives (higher number means the client lives in more populated region)  # noqa: E501

        :return: The region_population_relative of this ApplicationInformation.
        :rtype: float
        """
        return self._region_population_relative

    @region_population_relative.setter
    def region_population_relative(self, region_population_relative: float):
        """Sets the region_population_relative of this ApplicationInformation.

        Normalized population of region where client lives (higher number means the client lives in more populated region)  # noqa: E501

        :param region_population_relative: The region_population_relative of this ApplicationInformation.
        :type region_population_relative: float
        """

        self._region_population_relative = region_population_relative

    @property
    def region_rating_client(self) -> int:
        """Gets the region_rating_client of this ApplicationInformation.

        Our rating of the region where client lives (1,2,3)  # noqa: E501

        :return: The region_rating_client of this ApplicationInformation.
        :rtype: int
        """
        return self._region_rating_client

    @region_rating_client.setter
    def region_rating_client(self, region_rating_client: int):
        """Sets the region_rating_client of this ApplicationInformation.

        Our rating of the region where client lives (1,2,3)  # noqa: E501

        :param region_rating_client: The region_rating_client of this ApplicationInformation.
        :type region_rating_client: int
        """

        self._region_rating_client = region_rating_client

    @property
    def sk_id_curr(self) -> int:
        """Gets the sk_id_curr of this ApplicationInformation.

        ID of loan in our sample  # noqa: E501

        :return: The sk_id_curr of this ApplicationInformation.
        :rtype: int
        """
        return self._sk_id_curr

    @sk_id_curr.setter
    def sk_id_curr(self, sk_id_curr: int):
        """Sets the sk_id_curr of this ApplicationInformation.

        ID of loan in our sample  # noqa: E501

        :param sk_id_curr: The sk_id_curr of this ApplicationInformation.
        :type sk_id_curr: int
        """

        self._sk_id_curr = sk_id_curr

    @property
    def target(self) -> bool:
        """Gets the target of this ApplicationInformation.

        Target variable (1 - client with payment difficulties: he/she had late payment more than X days on at least one of the first Y installments of the loan in our sample, 0 - all other cases)  # noqa: E501

        :return: The target of this ApplicationInformation.
        :rtype: bool
        """
        return self._target

    @target.setter
    def target(self, target: bool):
        """Sets the target of this ApplicationInformation.

        Target variable (1 - client with payment difficulties: he/she had late payment more than X days on at least one of the first Y installments of the loan in our sample, 0 - all other cases)  # noqa: E501

        :param target: The target of this ApplicationInformation.
        :type target: bool
        """

        self._target = target

    @property
    def years_beginexpluatation_avg(self) -> float:
        """Gets the years_beginexpluatation_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The years_beginexpluatation_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._years_beginexpluatation_avg

    @years_beginexpluatation_avg.setter
    def years_beginexpluatation_avg(self, years_beginexpluatation_avg: float):
        """Sets the years_beginexpluatation_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param years_beginexpluatation_avg: The years_beginexpluatation_avg of this ApplicationInformation.
        :type years_beginexpluatation_avg: float
        """

        self._years_beginexpluatation_avg = years_beginexpluatation_avg

    @property
    def years_build_avg(self) -> float:
        """Gets the years_build_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :return: The years_build_avg of this ApplicationInformation.
        :rtype: float
        """
        return self._years_build_avg

    @years_build_avg.setter
    def years_build_avg(self, years_build_avg: float):
        """Sets the years_build_avg of this ApplicationInformation.

        Normalized information about building where the client lives, What is average (_AVG suffix), modus (_MODE suffix), median (_MEDI suffix) apartment size, common area, living area, age of building, number of elevators, number of entrances, state of the building, number of floor  # noqa: E501

        :param years_build_avg: The years_build_avg of this ApplicationInformation.
        :type years_build_avg: float
        """

        self._years_build_avg = years_build_avg
