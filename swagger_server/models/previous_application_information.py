# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PreviousApplicationInformation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, amt_annuity: float=None, amt_application: float=None, amt_down_payment: float=None, amt_goods_price: float=None, channel_type: str=None, cnt_payment: int=None, code_reject_reason: str=None, days_decision: int=None, days_first_drawing: int=None, days_first_due: int=None, days_last_due: int=None, days_last_due_1_st_version: int=None, hour_appr_process_start: int=None, name_cash_loan_purpose: str=None, name_client_type: str=None, name_contract_status: str=None, name_goods_category: str=None, name_payment_type: str=None, name_portfolio: str=None, name_product_type: str=None, name_seller_industry: str=None, name_type_suite: str=None, name_yield_group: str=None, nflag_insured_on_approval: bool=False, product_combination: str=None, rate_down_payment: float=None, sellerplace_area: int=None, sk_id_curr: int=None, sk_id_prev: int=None, weekday_appr_process_start: str=None):  # noqa: E501
        """PreviousApplicationInformation - a model defined in Swagger

        :param amt_annuity: The amt_annuity of this PreviousApplicationInformation.  # noqa: E501
        :type amt_annuity: float
        :param amt_application: The amt_application of this PreviousApplicationInformation.  # noqa: E501
        :type amt_application: float
        :param amt_down_payment: The amt_down_payment of this PreviousApplicationInformation.  # noqa: E501
        :type amt_down_payment: float
        :param amt_goods_price: The amt_goods_price of this PreviousApplicationInformation.  # noqa: E501
        :type amt_goods_price: float
        :param channel_type: The channel_type of this PreviousApplicationInformation.  # noqa: E501
        :type channel_type: str
        :param cnt_payment: The cnt_payment of this PreviousApplicationInformation.  # noqa: E501
        :type cnt_payment: int
        :param code_reject_reason: The code_reject_reason of this PreviousApplicationInformation.  # noqa: E501
        :type code_reject_reason: str
        :param days_decision: The days_decision of this PreviousApplicationInformation.  # noqa: E501
        :type days_decision: int
        :param days_first_drawing: The days_first_drawing of this PreviousApplicationInformation.  # noqa: E501
        :type days_first_drawing: int
        :param days_first_due: The days_first_due of this PreviousApplicationInformation.  # noqa: E501
        :type days_first_due: int
        :param days_last_due: The days_last_due of this PreviousApplicationInformation.  # noqa: E501
        :type days_last_due: int
        :param days_last_due_1_st_version: The days_last_due_1_st_version of this PreviousApplicationInformation.  # noqa: E501
        :type days_last_due_1_st_version: int
        :param hour_appr_process_start: The hour_appr_process_start of this PreviousApplicationInformation.  # noqa: E501
        :type hour_appr_process_start: int
        :param name_cash_loan_purpose: The name_cash_loan_purpose of this PreviousApplicationInformation.  # noqa: E501
        :type name_cash_loan_purpose: str
        :param name_client_type: The name_client_type of this PreviousApplicationInformation.  # noqa: E501
        :type name_client_type: str
        :param name_contract_status: The name_contract_status of this PreviousApplicationInformation.  # noqa: E501
        :type name_contract_status: str
        :param name_goods_category: The name_goods_category of this PreviousApplicationInformation.  # noqa: E501
        :type name_goods_category: str
        :param name_payment_type: The name_payment_type of this PreviousApplicationInformation.  # noqa: E501
        :type name_payment_type: str
        :param name_portfolio: The name_portfolio of this PreviousApplicationInformation.  # noqa: E501
        :type name_portfolio: str
        :param name_product_type: The name_product_type of this PreviousApplicationInformation.  # noqa: E501
        :type name_product_type: str
        :param name_seller_industry: The name_seller_industry of this PreviousApplicationInformation.  # noqa: E501
        :type name_seller_industry: str
        :param name_type_suite: The name_type_suite of this PreviousApplicationInformation.  # noqa: E501
        :type name_type_suite: str
        :param name_yield_group: The name_yield_group of this PreviousApplicationInformation.  # noqa: E501
        :type name_yield_group: str
        :param nflag_insured_on_approval: The nflag_insured_on_approval of this PreviousApplicationInformation.  # noqa: E501
        :type nflag_insured_on_approval: bool
        :param product_combination: The product_combination of this PreviousApplicationInformation.  # noqa: E501
        :type product_combination: str
        :param rate_down_payment: The rate_down_payment of this PreviousApplicationInformation.  # noqa: E501
        :type rate_down_payment: float
        :param sellerplace_area: The sellerplace_area of this PreviousApplicationInformation.  # noqa: E501
        :type sellerplace_area: int
        :param sk_id_curr: The sk_id_curr of this PreviousApplicationInformation.  # noqa: E501
        :type sk_id_curr: int
        :param sk_id_prev: The sk_id_prev of this PreviousApplicationInformation.  # noqa: E501
        :type sk_id_prev: int
        :param weekday_appr_process_start: The weekday_appr_process_start of this PreviousApplicationInformation.  # noqa: E501
        :type weekday_appr_process_start: str
        """
        self.swagger_types = {
            'amt_annuity': float,
            'amt_application': float,
            'amt_down_payment': float,
            'amt_goods_price': float,
            'channel_type': str,
            'cnt_payment': int,
            'code_reject_reason': str,
            'days_decision': int,
            'days_first_drawing': int,
            'days_first_due': int,
            'days_last_due': int,
            'days_last_due_1_st_version': int,
            'hour_appr_process_start': int,
            'name_cash_loan_purpose': str,
            'name_client_type': str,
            'name_contract_status': str,
            'name_goods_category': str,
            'name_payment_type': str,
            'name_portfolio': str,
            'name_product_type': str,
            'name_seller_industry': str,
            'name_type_suite': str,
            'name_yield_group': str,
            'nflag_insured_on_approval': bool,
            'product_combination': str,
            'rate_down_payment': float,
            'sellerplace_area': int,
            'sk_id_curr': int,
            'sk_id_prev': int,
            'weekday_appr_process_start': str
        }

        self.attribute_map = {
            'amt_annuity': 'AMT_ANNUITY',
            'amt_application': 'AMT_APPLICATION',
            'amt_down_payment': 'AMT_DOWN_PAYMENT',
            'amt_goods_price': 'AMT_GOODS_PRICE',
            'channel_type': 'CHANNEL_TYPE',
            'cnt_payment': 'CNT_PAYMENT',
            'code_reject_reason': 'CODE_REJECT_REASON',
            'days_decision': 'DAYS_DECISION',
            'days_first_drawing': 'DAYS_FIRST_DRAWING',
            'days_first_due': 'DAYS_FIRST_DUE',
            'days_last_due': 'DAYS_LAST_DUE',
            'days_last_due_1_st_version': 'DAYS_LAST_DUE_1ST_VERSION',
            'hour_appr_process_start': 'HOUR_APPR_PROCESS_START',
            'name_cash_loan_purpose': 'NAME_CASH_LOAN_PURPOSE',
            'name_client_type': 'NAME_CLIENT_TYPE',
            'name_contract_status': 'NAME_CONTRACT_STATUS',
            'name_goods_category': 'NAME_GOODS_CATEGORY',
            'name_payment_type': 'NAME_PAYMENT_TYPE',
            'name_portfolio': 'NAME_PORTFOLIO',
            'name_product_type': 'NAME_PRODUCT_TYPE',
            'name_seller_industry': 'NAME_SELLER_INDUSTRY',
            'name_type_suite': 'NAME_TYPE_SUITE',
            'name_yield_group': 'NAME_YIELD_GROUP',
            'nflag_insured_on_approval': 'NFLAG_INSURED_ON_APPROVAL',
            'product_combination': 'PRODUCT_COMBINATION',
            'rate_down_payment': 'RATE_DOWN_PAYMENT',
            'sellerplace_area': 'SELLERPLACE_AREA',
            'sk_id_curr': 'SK_ID_CURR',
            'sk_id_prev': 'SK_ID_PREV',
            'weekday_appr_process_start': 'WEEKDAY_APPR_PROCESS_START'
        }
        self._amt_annuity = amt_annuity
        self._amt_application = amt_application
        self._amt_down_payment = amt_down_payment
        self._amt_goods_price = amt_goods_price
        self._channel_type = channel_type
        self._cnt_payment = cnt_payment
        self._code_reject_reason = code_reject_reason
        self._days_decision = days_decision
        self._days_first_drawing = days_first_drawing
        self._days_first_due = days_first_due
        self._days_last_due = days_last_due
        self._days_last_due_1_st_version = days_last_due_1_st_version
        self._hour_appr_process_start = hour_appr_process_start
        self._name_cash_loan_purpose = name_cash_loan_purpose
        self._name_client_type = name_client_type
        self._name_contract_status = name_contract_status
        self._name_goods_category = name_goods_category
        self._name_payment_type = name_payment_type
        self._name_portfolio = name_portfolio
        self._name_product_type = name_product_type
        self._name_seller_industry = name_seller_industry
        self._name_type_suite = name_type_suite
        self._name_yield_group = name_yield_group
        self._nflag_insured_on_approval = nflag_insured_on_approval
        self._product_combination = product_combination
        self._rate_down_payment = rate_down_payment
        self._sellerplace_area = sellerplace_area
        self._sk_id_curr = sk_id_curr
        self._sk_id_prev = sk_id_prev
        self._weekday_appr_process_start = weekday_appr_process_start

    @classmethod
    def from_dict(cls, dikt) -> 'PreviousApplicationInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PreviousApplicationInformation of this PreviousApplicationInformation.  # noqa: E501
        :rtype: PreviousApplicationInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amt_annuity(self) -> float:
        """Gets the amt_annuity of this PreviousApplicationInformation.

        Annuity of previous application  # noqa: E501

        :return: The amt_annuity of this PreviousApplicationInformation.
        :rtype: float
        """
        return self._amt_annuity

    @amt_annuity.setter
    def amt_annuity(self, amt_annuity: float):
        """Sets the amt_annuity of this PreviousApplicationInformation.

        Annuity of previous application  # noqa: E501

        :param amt_annuity: The amt_annuity of this PreviousApplicationInformation.
        :type amt_annuity: float
        """

        self._amt_annuity = amt_annuity

    @property
    def amt_application(self) -> float:
        """Gets the amt_application of this PreviousApplicationInformation.

        For how much credit did client ask on the previous application  # noqa: E501

        :return: The amt_application of this PreviousApplicationInformation.
        :rtype: float
        """
        return self._amt_application

    @amt_application.setter
    def amt_application(self, amt_application: float):
        """Sets the amt_application of this PreviousApplicationInformation.

        For how much credit did client ask on the previous application  # noqa: E501

        :param amt_application: The amt_application of this PreviousApplicationInformation.
        :type amt_application: float
        """

        self._amt_application = amt_application

    @property
    def amt_down_payment(self) -> float:
        """Gets the amt_down_payment of this PreviousApplicationInformation.

        Down payment on the previous application  # noqa: E501

        :return: The amt_down_payment of this PreviousApplicationInformation.
        :rtype: float
        """
        return self._amt_down_payment

    @amt_down_payment.setter
    def amt_down_payment(self, amt_down_payment: float):
        """Sets the amt_down_payment of this PreviousApplicationInformation.

        Down payment on the previous application  # noqa: E501

        :param amt_down_payment: The amt_down_payment of this PreviousApplicationInformation.
        :type amt_down_payment: float
        """

        self._amt_down_payment = amt_down_payment

    @property
    def amt_goods_price(self) -> float:
        """Gets the amt_goods_price of this PreviousApplicationInformation.

        Goods price of good that client asked for (if applicable) on the previous application  # noqa: E501

        :return: The amt_goods_price of this PreviousApplicationInformation.
        :rtype: float
        """
        return self._amt_goods_price

    @amt_goods_price.setter
    def amt_goods_price(self, amt_goods_price: float):
        """Sets the amt_goods_price of this PreviousApplicationInformation.

        Goods price of good that client asked for (if applicable) on the previous application  # noqa: E501

        :param amt_goods_price: The amt_goods_price of this PreviousApplicationInformation.
        :type amt_goods_price: float
        """

        self._amt_goods_price = amt_goods_price

    @property
    def channel_type(self) -> str:
        """Gets the channel_type of this PreviousApplicationInformation.

        Through which channel we acquired the client on the previous application  # noqa: E501

        :return: The channel_type of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type: str):
        """Sets the channel_type of this PreviousApplicationInformation.

        Through which channel we acquired the client on the previous application  # noqa: E501

        :param channel_type: The channel_type of this PreviousApplicationInformation.
        :type channel_type: str
        """
        allowed_values = ["Country-wide", "Contact center", "Credit and cash offices", "Stone", "Regional / Local", "AP+ (Cash loan)", "Channel of corporate sales", "Car dealer"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_type` ({0}), must be one of {1}"
                .format(channel_type, allowed_values)
            )

        self._channel_type = channel_type

    @property
    def cnt_payment(self) -> int:
        """Gets the cnt_payment of this PreviousApplicationInformation.

        Term of previous credit at application of the previous application  # noqa: E501

        :return: The cnt_payment of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._cnt_payment

    @cnt_payment.setter
    def cnt_payment(self, cnt_payment: int):
        """Sets the cnt_payment of this PreviousApplicationInformation.

        Term of previous credit at application of the previous application  # noqa: E501

        :param cnt_payment: The cnt_payment of this PreviousApplicationInformation.
        :type cnt_payment: int
        """

        self._cnt_payment = cnt_payment

    @property
    def code_reject_reason(self) -> str:
        """Gets the code_reject_reason of this PreviousApplicationInformation.

        Why was the previous application rejected  # noqa: E501

        :return: The code_reject_reason of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._code_reject_reason

    @code_reject_reason.setter
    def code_reject_reason(self, code_reject_reason: str):
        """Sets the code_reject_reason of this PreviousApplicationInformation.

        Why was the previous application rejected  # noqa: E501

        :param code_reject_reason: The code_reject_reason of this PreviousApplicationInformation.
        :type code_reject_reason: str
        """
        allowed_values = ["XAP", "HC", "LIMIT", "CLIENT", "SCOFR", "SCO", "XNA", "VERIF", "SYSTEM"]  # noqa: E501
        if code_reject_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `code_reject_reason` ({0}), must be one of {1}"
                .format(code_reject_reason, allowed_values)
            )

        self._code_reject_reason = code_reject_reason

    @property
    def days_decision(self) -> int:
        """Gets the days_decision of this PreviousApplicationInformation.

        Relative to current application when was the decision about previous application made  # noqa: E501

        :return: The days_decision of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._days_decision

    @days_decision.setter
    def days_decision(self, days_decision: int):
        """Sets the days_decision of this PreviousApplicationInformation.

        Relative to current application when was the decision about previous application made  # noqa: E501

        :param days_decision: The days_decision of this PreviousApplicationInformation.
        :type days_decision: int
        """

        self._days_decision = days_decision

    @property
    def days_first_drawing(self) -> int:
        """Gets the days_first_drawing of this PreviousApplicationInformation.

        Relative to application date of current application when was the first disbursement of the previous application  # noqa: E501

        :return: The days_first_drawing of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._days_first_drawing

    @days_first_drawing.setter
    def days_first_drawing(self, days_first_drawing: int):
        """Sets the days_first_drawing of this PreviousApplicationInformation.

        Relative to application date of current application when was the first disbursement of the previous application  # noqa: E501

        :param days_first_drawing: The days_first_drawing of this PreviousApplicationInformation.
        :type days_first_drawing: int
        """

        self._days_first_drawing = days_first_drawing

    @property
    def days_first_due(self) -> int:
        """Gets the days_first_due of this PreviousApplicationInformation.

        Relative to application date of current application when was the first due supposed to be of the previous application  # noqa: E501

        :return: The days_first_due of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._days_first_due

    @days_first_due.setter
    def days_first_due(self, days_first_due: int):
        """Sets the days_first_due of this PreviousApplicationInformation.

        Relative to application date of current application when was the first due supposed to be of the previous application  # noqa: E501

        :param days_first_due: The days_first_due of this PreviousApplicationInformation.
        :type days_first_due: int
        """

        self._days_first_due = days_first_due

    @property
    def days_last_due(self) -> int:
        """Gets the days_last_due of this PreviousApplicationInformation.

        Relative to application date of current application when was the last due date of the previous application  # noqa: E501

        :return: The days_last_due of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._days_last_due

    @days_last_due.setter
    def days_last_due(self, days_last_due: int):
        """Sets the days_last_due of this PreviousApplicationInformation.

        Relative to application date of current application when was the last due date of the previous application  # noqa: E501

        :param days_last_due: The days_last_due of this PreviousApplicationInformation.
        :type days_last_due: int
        """

        self._days_last_due = days_last_due

    @property
    def days_last_due_1_st_version(self) -> int:
        """Gets the days_last_due_1_st_version of this PreviousApplicationInformation.

        Relative to application date of current application when was the first due of the previous application  # noqa: E501

        :return: The days_last_due_1_st_version of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._days_last_due_1_st_version

    @days_last_due_1_st_version.setter
    def days_last_due_1_st_version(self, days_last_due_1_st_version: int):
        """Sets the days_last_due_1_st_version of this PreviousApplicationInformation.

        Relative to application date of current application when was the first due of the previous application  # noqa: E501

        :param days_last_due_1_st_version: The days_last_due_1_st_version of this PreviousApplicationInformation.
        :type days_last_due_1_st_version: int
        """

        self._days_last_due_1_st_version = days_last_due_1_st_version

    @property
    def hour_appr_process_start(self) -> int:
        """Gets the hour_appr_process_start of this PreviousApplicationInformation.

        Approximately at what day hour did the client apply for the previous application  # noqa: E501

        :return: The hour_appr_process_start of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._hour_appr_process_start

    @hour_appr_process_start.setter
    def hour_appr_process_start(self, hour_appr_process_start: int):
        """Sets the hour_appr_process_start of this PreviousApplicationInformation.

        Approximately at what day hour did the client apply for the previous application  # noqa: E501

        :param hour_appr_process_start: The hour_appr_process_start of this PreviousApplicationInformation.
        :type hour_appr_process_start: int
        """

        self._hour_appr_process_start = hour_appr_process_start

    @property
    def name_cash_loan_purpose(self) -> str:
        """Gets the name_cash_loan_purpose of this PreviousApplicationInformation.

        Purpose of the cash loan  # noqa: E501

        :return: The name_cash_loan_purpose of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_cash_loan_purpose

    @name_cash_loan_purpose.setter
    def name_cash_loan_purpose(self, name_cash_loan_purpose: str):
        """Sets the name_cash_loan_purpose of this PreviousApplicationInformation.

        Purpose of the cash loan  # noqa: E501

        :param name_cash_loan_purpose: The name_cash_loan_purpose of this PreviousApplicationInformation.
        :type name_cash_loan_purpose: str
        """
        allowed_values = ["XAP", "XNA", "Repairs", "Everyday expenses", "Car repairs", "Building a house or an annex", "Other", "Journey", "Purchase of electronic equipment", "Medicine", "Payments on other loans", "Urgent needs", "Buying a used car", "Buying a new car", "Buying a holiday home / land", "Education", "Buying a home", "Furniture", "Buying a garage", "Business development", "Wedding / gift / holiday", "Hobby", "Gasification / water supply", "Refusal to name the goal", "Money for a third person"]  # noqa: E501
        if name_cash_loan_purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `name_cash_loan_purpose` ({0}), must be one of {1}"
                .format(name_cash_loan_purpose, allowed_values)
            )

        self._name_cash_loan_purpose = name_cash_loan_purpose

    @property
    def name_client_type(self) -> str:
        """Gets the name_client_type of this PreviousApplicationInformation.

        Was the client old or new client when applying for the previous application  # noqa: E501

        :return: The name_client_type of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_client_type

    @name_client_type.setter
    def name_client_type(self, name_client_type: str):
        """Sets the name_client_type of this PreviousApplicationInformation.

        Was the client old or new client when applying for the previous application  # noqa: E501

        :param name_client_type: The name_client_type of this PreviousApplicationInformation.
        :type name_client_type: str
        """
        allowed_values = ["Repeater", "New", "Refreshed", "XNA"]  # noqa: E501
        if name_client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_client_type` ({0}), must be one of {1}"
                .format(name_client_type, allowed_values)
            )

        self._name_client_type = name_client_type

    @property
    def name_contract_status(self) -> str:
        """Gets the name_contract_status of this PreviousApplicationInformation.

        Contract status (approved, cancelled, ...) of previous application  # noqa: E501

        :return: The name_contract_status of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_contract_status

    @name_contract_status.setter
    def name_contract_status(self, name_contract_status: str):
        """Sets the name_contract_status of this PreviousApplicationInformation.

        Contract status (approved, cancelled, ...) of previous application  # noqa: E501

        :param name_contract_status: The name_contract_status of this PreviousApplicationInformation.
        :type name_contract_status: str
        """
        allowed_values = ["Approved", "Refused", "Canceled", "Unused offer"]  # noqa: E501
        if name_contract_status not in allowed_values:
            raise ValueError(
                "Invalid value for `name_contract_status` ({0}), must be one of {1}"
                .format(name_contract_status, allowed_values)
            )

        self._name_contract_status = name_contract_status

    @property
    def name_goods_category(self) -> str:
        """Gets the name_goods_category of this PreviousApplicationInformation.

        What kind of goods did the client apply for in the previous application  # noqa: E501

        :return: The name_goods_category of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_goods_category

    @name_goods_category.setter
    def name_goods_category(self, name_goods_category: str):
        """Sets the name_goods_category of this PreviousApplicationInformation.

        What kind of goods did the client apply for in the previous application  # noqa: E501

        :param name_goods_category: The name_goods_category of this PreviousApplicationInformation.
        :type name_goods_category: str
        """
        allowed_values = ["Mobile", "XNA", "Consumer Electronics", "Construction Materials", "Auto Accessories", "Photo / Cinema Equipment", "Computers", "Audio/Video", "Medicine", "Clothing and Accessories", "Furniture", "Sport and Leisure", "Homewares", "Gardening", "Jewelry", "Vehicles", "Education", "Medical Supplies", "Other", "Direct Sales", "Office Appliances", "Fitness", "Tourism", "Insurance", "Additional Service", "Weapon", "Animals", "House Construction"]  # noqa: E501
        if name_goods_category not in allowed_values:
            raise ValueError(
                "Invalid value for `name_goods_category` ({0}), must be one of {1}"
                .format(name_goods_category, allowed_values)
            )

        self._name_goods_category = name_goods_category

    @property
    def name_payment_type(self) -> str:
        """Gets the name_payment_type of this PreviousApplicationInformation.

        Payment method that client chose to pay for the previous application  # noqa: E501

        :return: The name_payment_type of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_payment_type

    @name_payment_type.setter
    def name_payment_type(self, name_payment_type: str):
        """Sets the name_payment_type of this PreviousApplicationInformation.

        Payment method that client chose to pay for the previous application  # noqa: E501

        :param name_payment_type: The name_payment_type of this PreviousApplicationInformation.
        :type name_payment_type: str
        """
        allowed_values = ["Cash through the bank", "XNA", "Non-cash from your account", "Cashless from the account of the employer"]  # noqa: E501
        if name_payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_payment_type` ({0}), must be one of {1}"
                .format(name_payment_type, allowed_values)
            )

        self._name_payment_type = name_payment_type

    @property
    def name_portfolio(self) -> str:
        """Gets the name_portfolio of this PreviousApplicationInformation.

        Was the previous application for CASH, POS, CAR, …  # noqa: E501

        :return: The name_portfolio of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_portfolio

    @name_portfolio.setter
    def name_portfolio(self, name_portfolio: str):
        """Sets the name_portfolio of this PreviousApplicationInformation.

        Was the previous application for CASH, POS, CAR, …  # noqa: E501

        :param name_portfolio: The name_portfolio of this PreviousApplicationInformation.
        :type name_portfolio: str
        """
        allowed_values = ["POS", "Cash", "XNA", "Cards", "Cars"]  # noqa: E501
        if name_portfolio not in allowed_values:
            raise ValueError(
                "Invalid value for `name_portfolio` ({0}), must be one of {1}"
                .format(name_portfolio, allowed_values)
            )

        self._name_portfolio = name_portfolio

    @property
    def name_product_type(self) -> str:
        """Gets the name_product_type of this PreviousApplicationInformation.

        Was the previous application x-sell o walk-in  # noqa: E501

        :return: The name_product_type of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_product_type

    @name_product_type.setter
    def name_product_type(self, name_product_type: str):
        """Sets the name_product_type of this PreviousApplicationInformation.

        Was the previous application x-sell o walk-in  # noqa: E501

        :param name_product_type: The name_product_type of this PreviousApplicationInformation.
        :type name_product_type: str
        """
        allowed_values = ["XNA", "x-sell", "walk-in"]  # noqa: E501
        if name_product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `name_product_type` ({0}), must be one of {1}"
                .format(name_product_type, allowed_values)
            )

        self._name_product_type = name_product_type

    @property
    def name_seller_industry(self) -> str:
        """Gets the name_seller_industry of this PreviousApplicationInformation.

        The industry of the seller  # noqa: E501

        :return: The name_seller_industry of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_seller_industry

    @name_seller_industry.setter
    def name_seller_industry(self, name_seller_industry: str):
        """Sets the name_seller_industry of this PreviousApplicationInformation.

        The industry of the seller  # noqa: E501

        :param name_seller_industry: The name_seller_industry of this PreviousApplicationInformation.
        :type name_seller_industry: str
        """
        allowed_values = ["Connectivity", "XNA", "Consumer electronics", "Industry", "Clothing", "Furniture", "Construction", "Jewelry", "Auto technology", "MLM partners", "Tourism"]  # noqa: E501
        if name_seller_industry not in allowed_values:
            raise ValueError(
                "Invalid value for `name_seller_industry` ({0}), must be one of {1}"
                .format(name_seller_industry, allowed_values)
            )

        self._name_seller_industry = name_seller_industry

    @property
    def name_type_suite(self) -> str:
        """Gets the name_type_suite of this PreviousApplicationInformation.

        Who accompanied client when applying for the previous application  # noqa: E501

        :return: The name_type_suite of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_type_suite

    @name_type_suite.setter
    def name_type_suite(self, name_type_suite: str):
        """Sets the name_type_suite of this PreviousApplicationInformation.

        Who accompanied client when applying for the previous application  # noqa: E501

        :param name_type_suite: The name_type_suite of this PreviousApplicationInformation.
        :type name_type_suite: str
        """
        allowed_values = ["Unaccompanied", "Spouse, partner", "Family", "Children", "Other_B", "Other_A", "Group of people"]  # noqa: E501
        if name_type_suite not in allowed_values:
            raise ValueError(
                "Invalid value for `name_type_suite` ({0}), must be one of {1}"
                .format(name_type_suite, allowed_values)
            )

        self._name_type_suite = name_type_suite

    @property
    def name_yield_group(self) -> str:
        """Gets the name_yield_group of this PreviousApplicationInformation.

        Grouped interest rate into small medium and high of the previous application  # noqa: E501

        :return: The name_yield_group of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._name_yield_group

    @name_yield_group.setter
    def name_yield_group(self, name_yield_group: str):
        """Sets the name_yield_group of this PreviousApplicationInformation.

        Grouped interest rate into small medium and high of the previous application  # noqa: E501

        :param name_yield_group: The name_yield_group of this PreviousApplicationInformation.
        :type name_yield_group: str
        """
        allowed_values = ["middle", "low_action", "high", "low_normal", "XNA"]  # noqa: E501
        if name_yield_group not in allowed_values:
            raise ValueError(
                "Invalid value for `name_yield_group` ({0}), must be one of {1}"
                .format(name_yield_group, allowed_values)
            )

        self._name_yield_group = name_yield_group

    @property
    def nflag_insured_on_approval(self) -> bool:
        """Gets the nflag_insured_on_approval of this PreviousApplicationInformation.

        Did the client requested insurance during the previous application  # noqa: E501

        :return: The nflag_insured_on_approval of this PreviousApplicationInformation.
        :rtype: bool
        """
        return self._nflag_insured_on_approval

    @nflag_insured_on_approval.setter
    def nflag_insured_on_approval(self, nflag_insured_on_approval: bool):
        """Sets the nflag_insured_on_approval of this PreviousApplicationInformation.

        Did the client requested insurance during the previous application  # noqa: E501

        :param nflag_insured_on_approval: The nflag_insured_on_approval of this PreviousApplicationInformation.
        :type nflag_insured_on_approval: bool
        """

        self._nflag_insured_on_approval = nflag_insured_on_approval

    @property
    def product_combination(self) -> str:
        """Gets the product_combination of this PreviousApplicationInformation.

        Detailed product combination of the previous application  # noqa: E501

        :return: The product_combination of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._product_combination

    @product_combination.setter
    def product_combination(self, product_combination: str):
        """Sets the product_combination of this PreviousApplicationInformation.

        Detailed product combination of the previous application  # noqa: E501

        :param product_combination: The product_combination of this PreviousApplicationInformation.
        :type product_combination: str
        """
        allowed_values = ["POS mobile with interest", "Cash X-Sell: low", "Cash X-Sell: high", "Cash X-Sell: middle", "Cash Street: high", "Cash", "POS household without interest", "POS household with interest", "POS other with interest", "Card X-Sell", "POS mobile without interest", "Card Street", "POS industry with interest", "Cash Street: low", "POS industry without interest", "Cash Street: middle", "POS others without interest"]  # noqa: E501
        if product_combination not in allowed_values:
            raise ValueError(
                "Invalid value for `product_combination` ({0}), must be one of {1}"
                .format(product_combination, allowed_values)
            )

        self._product_combination = product_combination

    @property
    def rate_down_payment(self) -> float:
        """Gets the rate_down_payment of this PreviousApplicationInformation.

        Down payment rate normalized on previous credit  # noqa: E501

        :return: The rate_down_payment of this PreviousApplicationInformation.
        :rtype: float
        """
        return self._rate_down_payment

    @rate_down_payment.setter
    def rate_down_payment(self, rate_down_payment: float):
        """Sets the rate_down_payment of this PreviousApplicationInformation.

        Down payment rate normalized on previous credit  # noqa: E501

        :param rate_down_payment: The rate_down_payment of this PreviousApplicationInformation.
        :type rate_down_payment: float
        """

        self._rate_down_payment = rate_down_payment

    @property
    def sellerplace_area(self) -> int:
        """Gets the sellerplace_area of this PreviousApplicationInformation.

        Selling area of seller place of the previous application  # noqa: E501

        :return: The sellerplace_area of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._sellerplace_area

    @sellerplace_area.setter
    def sellerplace_area(self, sellerplace_area: int):
        """Sets the sellerplace_area of this PreviousApplicationInformation.

        Selling area of seller place of the previous application  # noqa: E501

        :param sellerplace_area: The sellerplace_area of this PreviousApplicationInformation.
        :type sellerplace_area: int
        """

        self._sellerplace_area = sellerplace_area

    @property
    def sk_id_curr(self) -> int:
        """Gets the sk_id_curr of this PreviousApplicationInformation.

        ID of loan in our sample  # noqa: E501

        :return: The sk_id_curr of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._sk_id_curr

    @sk_id_curr.setter
    def sk_id_curr(self, sk_id_curr: int):
        """Sets the sk_id_curr of this PreviousApplicationInformation.

        ID of loan in our sample  # noqa: E501

        :param sk_id_curr: The sk_id_curr of this PreviousApplicationInformation.
        :type sk_id_curr: int
        """

        self._sk_id_curr = sk_id_curr

    @property
    def sk_id_prev(self) -> int:
        """Gets the sk_id_prev of this PreviousApplicationInformation.

        ID of previous credit in Home credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loan applications in Home Credit, previous application could, but not necessarily have to lead to credit)  # noqa: E501

        :return: The sk_id_prev of this PreviousApplicationInformation.
        :rtype: int
        """
        return self._sk_id_prev

    @sk_id_prev.setter
    def sk_id_prev(self, sk_id_prev: int):
        """Sets the sk_id_prev of this PreviousApplicationInformation.

        ID of previous credit in Home credit related to loan in our sample. (One loan in our sample can have 0,1,2 or more previous loan applications in Home Credit, previous application could, but not necessarily have to lead to credit)  # noqa: E501

        :param sk_id_prev: The sk_id_prev of this PreviousApplicationInformation.
        :type sk_id_prev: int
        """

        self._sk_id_prev = sk_id_prev

    @property
    def weekday_appr_process_start(self) -> str:
        """Gets the weekday_appr_process_start of this PreviousApplicationInformation.

        On which day of the week did the client apply for previous application  # noqa: E501

        :return: The weekday_appr_process_start of this PreviousApplicationInformation.
        :rtype: str
        """
        return self._weekday_appr_process_start

    @weekday_appr_process_start.setter
    def weekday_appr_process_start(self, weekday_appr_process_start: str):
        """Sets the weekday_appr_process_start of this PreviousApplicationInformation.

        On which day of the week did the client apply for previous application  # noqa: E501

        :param weekday_appr_process_start: The weekday_appr_process_start of this PreviousApplicationInformation.
        :type weekday_appr_process_start: str
        """
        allowed_values = ["SATURDAY", "THURSDAY", "TUESDAY", "MONDAY", "FRIDAY", "SUNDAY", "WEDNESDAY"]  # noqa: E501
        if weekday_appr_process_start not in allowed_values:
            raise ValueError(
                "Invalid value for `weekday_appr_process_start` ({0}), must be one of {1}"
                .format(weekday_appr_process_start, allowed_values)
            )

        self._weekday_appr_process_start = weekday_appr_process_start
